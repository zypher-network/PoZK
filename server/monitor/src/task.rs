use crate::tx::{FuncType, TxChanData};
use anyhow::Result;
use db::{ControllerKey, ReDB};
use docker::{ContainerNewOption, DockerManager, Volumes};
use ethers::abi::{Bytes, Token, Uint};
use ethers::types::Address;
use ethers::utils::hex::hex::encode;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use std::path::PathBuf;
use std::sync::Arc;
use std::time::Duration;
use tokio::sync::mpsc::{UnboundedReceiver, UnboundedSender};
use tokio::{fs, spawn};

/// The type of data structure sent by the task channel.
/// Currently, there is only one type,
/// which is to listen to createTask and then execute the task execution event sent by tx_service after accept is executed.
#[derive(Clone, Serialize, Deserialize, Debug)]
pub enum TaskType {
    RunTask,
}

#[derive(Clone, Serialize, Deserialize, Debug)]
pub struct TaskChanData {
    pub ty: TaskType,
    pub data: Vec<u8>,
    pub prover: Address,
    pub tag: String,
    pub tid: Uint,
    pub miner: ControllerKey,
    pub controller: ControllerKey,
}

pub struct TaskService {
    db: Arc<ReDB>,
    docker_manager: DockerManager,
    task_receiver: UnboundedReceiver<TaskChanData>,
    tx_sender: UnboundedSender<TxChanData>,
    base_path: PathBuf,
}

impl TaskService {
    pub fn new(
        db: Arc<ReDB>,
        docker_manager: DockerManager,
        task_receiver: UnboundedReceiver<TaskChanData>,
        tx_sender: UnboundedSender<TxChanData>,
        bath_path: &str,
    ) -> Result<Self> {
        let base_path = PathBuf::from(bath_path);
        Ok(Self {
            db,
            docker_manager,
            task_receiver,
            tx_sender,
            base_path,
        })
    }

    /// 1. create folder
    /// 2. create file
    /// 3. run task
    ///     1. create container
    ///     2. save container to db
    ///     3. start container
    /// 4. wait task result
    /// 5. send data to tx chan
    pub fn run_task(
        data: TaskChanData,
        base_path: PathBuf,
        docker_manager: DockerManager,
        tx_sender: UnboundedSender<TxChanData>,
        db: Arc<ReDB>,
    ) {
        spawn(async move {
            let ty = data.ty.clone();
            let mut base_path = base_path;
            let base_str = format!("{:?}-{}-{}", data.prover, data.tag, data.tid.to_string());

            // - create folder
            base_path.push(&base_str);
            match tokio::fs::create_dir(&base_path).await {
                Ok(_) => {}
                Err(e) => {
                    log::error!("[task] handle: {ty:?}, create dir: {e:?}");
                    return;
                }
            }

            // - create file
            let (input_file, _input_base, publics_file, publics_path, proof_file, proof_path) = {
                let (input_file, input_base) = {
                    let input_file = format!("{}.input", &base_str);
                    let mut base_path = base_path.clone();
                    base_path.push(&input_file);
                    let input_data = format!("0x{}", encode(&data.data));
                    match tokio::fs::write(base_path.as_path(), input_data).await {
                        Ok(_) => {}
                        Err(e) => {
                            log::error!("[task] handle: {ty:?}, create input file: {e:?}");
                            return;
                        }
                    }
                    (input_file, base_path)
                };

                let (publics_file, publics_path) = {
                    let publics_file = format!("{}.publics", &base_str);
                    let mut base_path = base_path.clone();
                    base_path.push(&publics_file);
                    match tokio::fs::write(base_path.as_path(), b"").await {
                        Ok(_) => {}
                        Err(e) => {
                            log::error!("[task] handle: {ty:?}, create publics file: {e:?}");
                            return;
                        }
                    }
                    (publics_file, base_path)
                };

                let (proof_file, proof_path) = {
                    let proof_file = format!("{}.proof", base_str);
                    let mut base_path = base_path.clone();
                    base_path.push(&proof_file);
                    match tokio::fs::write(base_path.as_path(), b"").await {
                        Ok(_) => {}
                        Err(e) => {
                            log::error!("[task] handle: {ty:?}, create proof file: {e:?}");
                            return;
                        }
                    }
                    (proof_file, base_path)
                };

                (
                    input_file,
                    input_base,
                    publics_file,
                    publics_path,
                    proof_file,
                    proof_path,
                )
            };

            // - run task
            let ccf = {
                let op = ContainerNewOption {
                    cpu_shares: None,
                    cpus: None,
                    env: Some(vec![
                        format!("INPUT=/data/{input_file}"),
                        format!("OUTPUT=/data/{publics_file}"),
                        format!("PROOF=/data/{proof_file}"),
                    ]),
                    cmd: None,
                    expose: None,
                    memory: None,
                    volumes: Some(vec![Volumes {
                        src_volumes: "/data".to_string(),
                        host_volumes: base_path.as_os_str().to_str().unwrap().to_string(), // safe
                    }]),
                };

                let meta = match db.prover_meta(&data.miner, &data.prover, &data.tag) {
                    Ok(v) => {
                        let Some(meta) = v else {
                            log::warn!("[task] handle: {ty:?}, get prover meta nil");
                            return;
                        };
                        meta
                    }
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, get prover meta: {e:?}");
                        return;
                    }
                };

                let ccf = match docker_manager
                    .new_container(&meta.repository, &data.tag, &op)
                    .await
                {
                    Ok(v) => v,
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, new container: {e:?}");
                        return;
                    }
                };

                // insert container_id to db
                match db.prover_container_add(&data.miner, &data.prover, &data.tag, &ccf.id) {
                    Ok(_) => {}
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, add container to db fail: {e:?}");
                    }
                }

                match docker_manager.start_container(&ccf.id).await {
                    Ok(_) => {}
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, start container: {e:?}");
                    }
                }

                ccf
            };

            // delete container
            Self::delete_container(
                docker_manager.clone(),
                db.clone(),
                ccf.id.clone(),
                data.clone(),
                ty.clone(),
            );

            // - query output file
            let (publics, proof) = {
                let mut count = 0;
                let max_count = 20;

                let mut publics_res = None;
                let mut proof_res = None;

                while publics_res.is_none() || proof_res.is_none() {
                    count += 1;

                    if count >= max_count {
                        break;
                    }

                    match fs::read_to_string(&publics_path).await {
                        Ok(v) => publics_res.replace(v),
                        Err(e) => {
                            log::error!("[task] handle: {ty:?}, read publics: {e:?}");
                            return;
                        }
                    };

                    match fs::read_to_string(&proof_path).await {
                        Ok(v) => proof_res.replace(v),
                        Err(e) => {
                            log::error!("[task] handle: {ty:?}, read proof: {e:?}");
                            return;
                        }
                    };

                    tokio::time::sleep(Duration::from_secs(2)).await;
                }

                if publics_res.is_none() || proof_res.is_none() {
                    log::warn!("[task] handle: {ty:?}, get prover result is nil, retry: {count}");
                    return;
                }

                (publics_res.unwrap(), proof_res.unwrap())
            };

            // - send tx
            {
                let mut map = BTreeMap::new();
                let proof = Token::Bytes(Bytes::from(proof));
                let publics = Token::Bytes(Bytes::from(publics));

                map.insert("proof".to_string(), proof);
                map.insert("publics".to_string(), publics);
                map.insert("id".to_string(), Token::Uint(data.tid));

                let tx_chan_data = TxChanData {
                    ty: FuncType::Submit,
                    tx_hash: None,
                    data: map,
                };

                match tx_sender.send(tx_chan_data) {
                    Ok(_) => {
                        log::debug!("[task] handle: {ty:?}, send to tx chan success")
                    }
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, send to tx chan: {e:?}")
                    }
                }
            }
        });
    }

    /// Execute tasks, and process messages received from the task channel according to different types
    pub fn run(mut self) {
        spawn(async move {
            log::info!("task service run");
            while let Some(data) = self.task_receiver.recv().await {
                let base_path = self.base_path.clone();

                match data.ty {
                    TaskType::RunTask => {
                        Self::run_task(
                            data,
                            base_path,
                            self.docker_manager.clone(),
                            self.tx_sender.clone(),
                            self.db.clone(),
                        );
                    }
                }
            }
        });
    }

    pub fn delete_container(
        docker_manager: DockerManager,
        db: Arc<ReDB>,
        id: String,
        data: TaskChanData,
        ty: TaskType,
    ) {
        spawn(async move {
            // query container status util to not running
            let can_delete = {
                let mut count = 0;
                let max_count = 20;

                let mut flag = false;

                while !flag {
                    count += 1;

                    if count >= max_count {
                        break;
                    }

                    match docker_manager.query_container_status(&id).await {
                        Ok(state) => {
                            if state.running {
                                tokio::time::sleep(Duration::from_secs(2)).await;
                                continue;
                            } else {
                                flag = true;
                            }
                        }
                        Err(e) => {
                            log::error!(
                                "[task] handle: {ty:?}, query container status: {id}, err: {e:?}"
                            )
                        }
                    }
                }

                log::debug!("[task] handle: {ty:?}, query container status: {id}, count: {count}, can delete: {flag}");
                flag
            };

            // remove container
            if can_delete {
                match db.prover_container_remove(&data.miner, &data.prover, &data.tag, &id) {
                    Ok(_) => {
                        log::debug!("[task] handle: {ty:?}, db remove container: {id}, success");
                    }
                    Err(e) => {
                        log::error!("[task] handle: {ty:?}, remove container: {id}: {e:?}");
                        return;
                    }
                }
                match docker_manager.remove_container(&id).await {
                    Ok(_) => {
                        log::debug!(
                            "[task] handle: {ty:?}, docker remove container: {id}, success"
                        );
                    }
                    Err(e) => {
                        log::error!(
                            "[task] handle: {ty:?}, docker remove container: {id}: {e:?}"
                        );
                    }
                }
            }
        });
    }
}

#[cfg(test)]
mod test {
    use crate::task::{TaskChanData, TaskType};
    use crate::TaskService;
    use db::{ControllerKey, ReDB};
    use docker::DockerManager;
    use ethers::abi::Uint;
    use ethers::prelude::Address;
    use ethers::utils::hex;
    use std::path::PathBuf;
    use std::str::FromStr;
    use std::sync::Arc;
    use std::time::Duration;
    use tokio::sync::mpsc::unbounded_channel;

    #[test]
    fn test() {
        let rt = tokio::runtime::Builder::new_current_thread()
            .enable_all()
            .build()
            .unwrap();
        rt.block_on(async {
            let base_path = PathBuf::from("./test");
            tokio::fs::write(&base_path, b"").await.unwrap();
            let file = tokio::fs::read_to_string(base_path).await.unwrap();
            println!("content len: {}", file.len());
        });
    }

    #[test]
    fn test_task() {
        env_logger::init();
        let rt = tokio::runtime::Builder::new_current_thread()
            .enable_all()
            .build()
            .unwrap();
        rt.block_on(async {
            let db = {
                let db_path = PathBuf::from("/tmp/pozk");
                let db = ReDB::new(&db_path, true).unwrap();
                Arc::new(db)
            };

            let docker_manager = DockerManager::new().unwrap();

            let (tx_sender, mut tx_receiver) = unbounded_channel();
            let (task_sender, task_receiver) = unbounded_channel();

            let task_service = TaskService::new(
                db.clone(),
                docker_manager.clone(),
                task_receiver,
                tx_sender.clone(),
                "/home/cloud/tmp/pozk",
            )
            .unwrap();

            let data = vec![
                78_u8, 157, 103, 70, 11, 76, 202, 199, 223, 233, 129, 125, 142, 73, 241, 215, 168,
                8, 109, 99, 125, 68, 181, 20, 184, 204, 2, 201, 155, 39, 191, 129, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 208, 31, 222, 50, 229, 76, 184, 78, 204, 241, 166, 215, 200, 249, 93, 47,
                50, 47, 46, 222, 194, 222, 115, 97, 95, 215, 151, 113, 210, 239, 108, 92, 179, 31,
                25, 247, 233, 255, 162, 18, 62, 136, 7, 111, 145, 56, 213, 227, 185, 66, 103, 188,
                204, 167, 232, 145, 202, 138, 221, 19, 50, 81, 162, 45, 137, 43, 140, 253, 145,
                185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126,
                52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158,
                144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118,
                252, 44, 103, 26, 134, 31, 5, 72, 176, 56, 238, 33, 225, 126, 218, 214, 57, 98,
                224, 190, 17, 254, 112, 89, 245, 183, 96, 99, 10, 230, 148, 208, 65, 194, 10, 162,
                38, 58, 22, 90, 196, 226, 221, 25, 44, 57, 158, 133, 135, 232, 104, 231, 29, 169,
                30, 93, 65, 73, 192, 2, 178, 247, 240, 169, 230, 217, 119, 69, 23, 212, 43, 140,
                253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154,
                173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88,
                32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106,
                194, 118, 252, 44, 103, 26, 134, 31, 9, 115, 184, 107, 251, 57, 244, 13, 181, 82,
                120, 61, 207, 59, 247, 23, 185, 61, 178, 249, 245, 194, 74, 40, 30, 201, 155, 237,
                100, 105, 54, 43, 30, 87, 128, 180, 236, 145, 151, 180, 133, 200, 107, 255, 4, 162,
                55, 242, 148, 58, 16, 178, 210, 46, 128, 123, 113, 187, 12, 62, 146, 200, 103, 28,
                43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188,
                66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36,
                167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192,
                225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 29, 171, 108, 180, 1, 2, 161, 113,
                190, 191, 72, 162, 217, 255, 194, 139, 188, 202, 85, 206, 197, 105, 182, 204, 105,
                108, 19, 32, 45, 98, 36, 11, 9, 195, 53, 100, 236, 171, 108, 88, 143, 85, 206, 106,
                105, 42, 68, 65, 125, 200, 107, 150, 229, 52, 52, 73, 5, 64, 84, 123, 163, 159, 16,
                240, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 13, 118, 82, 240, 217, 98, 218,
                48, 217, 205, 188, 119, 161, 5, 5, 129, 216, 239, 68, 164, 44, 175, 231, 153, 142,
                100, 206, 38, 21, 97, 188, 83, 7, 0, 41, 32, 9, 38, 52, 88, 234, 98, 140, 190, 82,
                41, 65, 60, 245, 148, 82, 8, 91, 143, 106, 198, 11, 157, 28, 17, 15, 228, 115, 30,
                43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188,
                66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36,
                167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192,
                225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 44, 155, 154, 89, 30, 242, 98, 83,
                223, 233, 35, 102, 94, 12, 75, 93, 20, 238, 86, 21, 160, 101, 25, 40, 176, 172,
                108, 70, 255, 56, 162, 217, 22, 55, 10, 128, 155, 77, 103, 111, 130, 243, 176, 57,
                137, 25, 159, 28, 42, 107, 78, 130, 7, 193, 117, 65, 83, 203, 47, 230, 255, 86,
                127, 242, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126,
                227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170,
                108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21,
                219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 45, 54, 241, 186, 113,
                160, 117, 29, 130, 214, 4, 208, 28, 139, 184, 93, 250, 140, 8, 79, 133, 241, 4,
                163, 3, 99, 42, 253, 123, 45, 93, 243, 0, 220, 43, 228, 206, 2, 9, 184, 163, 86,
                152, 181, 224, 95, 179, 155, 151, 122, 114, 0, 145, 88, 157, 91, 122, 5, 24, 75,
                62, 146, 140, 48, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74,
                146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50,
                42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124,
                17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 37, 157, 138, 47,
                121, 60, 185, 110, 221, 218, 247, 212, 144, 7, 68, 194, 150, 248, 162, 62, 143, 57,
                99, 216, 132, 198, 172, 230, 39, 118, 37, 18, 40, 112, 90, 216, 81, 155, 73, 2,
                105, 201, 249, 71, 156, 126, 113, 115, 161, 104, 154, 165, 7, 23, 94, 83, 39, 254,
                135, 162, 151, 202, 50, 9, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222,
                223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135,
                108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118,
                42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 4, 98,
                152, 9, 78, 195, 186, 233, 183, 41, 218, 171, 132, 156, 183, 21, 202, 1, 78, 251,
                11, 104, 1, 142, 182, 191, 205, 234, 236, 54, 58, 180, 13, 173, 132, 100, 8, 69,
                221, 249, 130, 157, 95, 70, 27, 136, 120, 238, 192, 190, 225, 121, 214, 12, 66, 62,
                198, 68, 80, 119, 68, 172, 174, 111, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65,
                231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13,
                130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39,
                123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31,
                43, 252, 36, 35, 93, 239, 79, 29, 149, 219, 41, 248, 112, 108, 231, 247, 232, 248,
                241, 164, 191, 81, 56, 39, 158, 160, 237, 172, 184, 230, 230, 252, 30, 139, 127,
                172, 224, 152, 165, 60, 136, 75, 196, 165, 122, 37, 80, 252, 33, 3, 21, 176, 144,
                43, 4, 68, 183, 64, 129, 216, 16, 204, 53, 105, 43, 140, 253, 145, 185, 5, 202,
                227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89,
                210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237,
                31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103,
                26, 134, 31, 36, 176, 2, 149, 136, 114, 1, 79, 180, 159, 60, 8, 50, 181, 123, 2,
                50, 247, 77, 46, 231, 7, 160, 229, 35, 249, 34, 22, 104, 7, 22, 183, 8, 89, 203,
                132, 85, 74, 48, 56, 233, 211, 226, 99, 145, 69, 50, 237, 183, 70, 246, 100, 26,
                144, 221, 232, 158, 109, 180, 46, 107, 102, 178, 206, 43, 140, 253, 145, 185, 5,
                202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77,
                89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172,
                237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44,
                103, 26, 134, 31, 30, 141, 104, 86, 151, 82, 21, 73, 140, 225, 73, 66, 165, 215,
                29, 249, 123, 188, 197, 40, 201, 221, 66, 226, 143, 29, 199, 232, 151, 33, 181, 25,
                26, 115, 153, 100, 73, 49, 207, 151, 144, 116, 144, 161, 115, 72, 194, 132, 198,
                110, 239, 142, 142, 254, 11, 34, 71, 61, 159, 63, 154, 191, 119, 244, 43, 140, 253,
                145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173,
                126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32,
                158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194,
                118, 252, 44, 103, 26, 134, 31, 42, 94, 14, 16, 44, 184, 83, 116, 167, 58, 201,
                155, 117, 104, 115, 101, 74, 246, 40, 133, 191, 200, 169, 197, 9, 14, 209, 142, 68,
                150, 93, 60, 12, 20, 182, 252, 56, 123, 167, 76, 1, 206, 245, 14, 50, 229, 72, 8,
                200, 128, 75, 48, 215, 35, 196, 68, 69, 26, 47, 144, 85, 20, 186, 232, 43, 140,
                253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154,
                173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88,
                32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106,
                194, 118, 252, 44, 103, 26, 134, 31, 9, 4, 155, 72, 4, 209, 202, 221, 170, 112, 53,
                120, 121, 130, 62, 204, 55, 151, 139, 54, 62, 225, 98, 137, 123, 222, 228, 58, 186,
                14, 64, 252, 10, 145, 50, 124, 22, 154, 39, 104, 179, 223, 20, 111, 74, 102, 15,
                101, 44, 60, 55, 165, 189, 24, 147, 180, 49, 44, 230, 7, 100, 51, 86, 82, 43, 140,
                253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154,
                173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88,
                32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106,
                194, 118, 252, 44, 103, 26, 134, 31, 6, 217, 18, 196, 43, 112, 233, 53, 216, 231,
                16, 12, 210, 212, 238, 170, 243, 30, 174, 26, 13, 131, 104, 162, 136, 12, 182, 244,
                83, 12, 248, 97, 9, 233, 136, 28, 150, 143, 81, 17, 246, 248, 111, 205, 26, 45, 59,
                81, 22, 168, 20, 175, 92, 140, 19, 174, 170, 5, 229, 151, 219, 131, 234, 19, 43,
                140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66,
                154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167,
                88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225,
                106, 194, 118, 252, 44, 103, 26, 134, 31, 28, 119, 83, 193, 64, 62, 15, 241, 120,
                168, 151, 208, 166, 76, 205, 58, 135, 140, 154, 95, 117, 17, 167, 66, 74, 181, 143,
                107, 160, 236, 9, 66, 13, 140, 170, 187, 143, 131, 63, 31, 141, 16, 245, 126, 88,
                6, 161, 17, 243, 137, 153, 112, 221, 152, 161, 223, 39, 188, 17, 98, 42, 125, 193,
                238, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 5, 184, 242, 49, 160, 138, 203,
                136, 13, 102, 16, 7, 51, 193, 215, 247, 74, 214, 114, 245, 189, 166, 94, 77, 3, 81,
                253, 69, 49, 237, 29, 124, 15, 199, 127, 240, 0, 223, 47, 218, 209, 215, 85, 27,
                147, 203, 93, 128, 162, 47, 114, 248, 92, 15, 85, 75, 13, 129, 43, 130, 152, 102,
                3, 183, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126,
                227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170,
                108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21,
                219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 42, 252, 164, 87, 158,
                121, 3, 184, 194, 127, 46, 147, 61, 133, 192, 34, 92, 196, 106, 196, 194, 196, 230,
                240, 75, 197, 66, 204, 208, 163, 167, 222, 17, 195, 72, 92, 32, 238, 201, 3, 56,
                209, 128, 82, 235, 149, 229, 151, 227, 165, 223, 149, 110, 244, 65, 67, 242, 168,
                103, 148, 194, 6, 126, 61, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222,
                223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135,
                108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118,
                42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 47, 174,
                158, 44, 167, 97, 67, 178, 194, 255, 0, 71, 226, 206, 22, 138, 130, 186, 136, 200,
                164, 57, 237, 35, 225, 75, 85, 167, 76, 48, 253, 97, 46, 139, 47, 124, 238, 102,
                186, 236, 179, 11, 13, 56, 217, 30, 235, 84, 70, 120, 201, 138, 32, 180, 231, 165,
                150, 89, 226, 69, 28, 18, 100, 66, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65,
                231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13,
                130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39,
                123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31,
                32, 27, 31, 146, 10, 219, 232, 73, 147, 212, 130, 85, 29, 197, 53, 216, 201, 243,
                117, 106, 100, 110, 20, 156, 97, 38, 1, 112, 65, 103, 89, 132, 34, 149, 42, 79,
                208, 252, 88, 190, 1, 197, 247, 228, 193, 231, 222, 0, 93, 73, 10, 195, 101, 214,
                141, 205, 151, 202, 237, 207, 165, 200, 136, 153, 43, 140, 253, 145, 185, 5, 202,
                227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89,
                210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237,
                31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103,
                26, 134, 31, 32, 230, 123, 243, 92, 92, 61, 16, 233, 98, 158, 136, 163, 204, 174,
                177, 195, 10, 104, 60, 252, 207, 73, 129, 213, 224, 56, 67, 131, 201, 119, 139, 16,
                166, 64, 157, 61, 163, 2, 224, 161, 95, 28, 73, 94, 222, 46, 230, 198, 245, 95,
                142, 70, 160, 213, 126, 75, 173, 158, 109, 210, 56, 38, 194, 43, 140, 253, 145,
                185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126,
                52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158,
                144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118,
                252, 44, 103, 26, 134, 31, 30, 87, 136, 176, 112, 254, 235, 224, 205, 106, 226, 39,
                184, 96, 10, 172, 29, 195, 213, 56, 193, 38, 157, 1, 89, 183, 124, 46, 194, 35, 20,
                73, 21, 181, 173, 107, 135, 202, 158, 13, 52, 51, 55, 165, 243, 54, 219, 119, 6,
                37, 10, 200, 176, 194, 33, 207, 2, 245, 123, 114, 252, 206, 93, 10, 43, 140, 253,
                145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173,
                126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32,
                158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194,
                118, 252, 44, 103, 26, 134, 31, 20, 103, 69, 36, 132, 20, 181, 93, 198, 183, 93,
                160, 132, 94, 42, 40, 18, 86, 102, 117, 14, 243, 241, 147, 213, 254, 154, 140, 23,
                173, 36, 183, 16, 142, 183, 75, 52, 151, 15, 173, 137, 203, 116, 223, 125, 33, 123,
                176, 50, 23, 46, 129, 60, 168, 180, 196, 199, 78, 134, 74, 226, 191, 137, 37, 43,
                140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66,
                154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167,
                88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225,
                106, 194, 118, 252, 44, 103, 26, 134, 31, 30, 222, 151, 22, 63, 246, 246, 251, 176,
                101, 66, 224, 168, 93, 222, 245, 89, 48, 101, 157, 249, 227, 153, 144, 150, 238,
                99, 61, 41, 53, 52, 182, 44, 158, 82, 97, 221, 67, 234, 152, 65, 52, 163, 85, 221,
                179, 179, 34, 177, 200, 117, 100, 68, 97, 173, 73, 55, 133, 115, 11, 217, 100, 199,
                121, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 22, 37, 141, 235, 97, 31, 63,
                126, 41, 201, 90, 209, 111, 35, 22, 97, 95, 19, 225, 75, 222, 254, 88, 214, 115,
                23, 8, 170, 71, 178, 61, 62, 41, 234, 230, 99, 104, 221, 44, 75, 72, 147, 149, 198,
                89, 30, 8, 112, 40, 164, 183, 74, 3, 102, 207, 137, 129, 89, 113, 56, 225, 73, 237,
                165, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 4, 105, 230, 174, 209, 38, 166,
                85, 73, 106, 209, 206, 214, 197, 39, 174, 198, 90, 121, 73, 61, 51, 28, 6, 155,
                130, 16, 64, 160, 13, 231, 196, 8, 26, 173, 185, 125, 106, 112, 182, 36, 77, 171,
                241, 75, 22, 185, 248, 212, 142, 98, 9, 204, 100, 80, 35, 93, 223, 65, 166, 60, 33,
                1, 233, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126,
                227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170,
                108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21,
                219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 13, 236, 132, 32, 189,
                174, 10, 78, 88, 161, 69, 247, 128, 173, 145, 143, 90, 35, 72, 19, 188, 111, 184,
                148, 104, 127, 181, 14, 133, 25, 95, 4, 38, 31, 108, 27, 73, 151, 38, 215, 116,
                139, 84, 235, 117, 214, 202, 114, 123, 221, 226, 147, 9, 59, 5, 207, 173, 46, 114,
                216, 97, 215, 254, 233, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223,
                74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108,
                50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42,
                124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 23, 90, 242,
                92, 161, 250, 205, 186, 238, 69, 7, 186, 181, 53, 87, 120, 118, 225, 26, 44, 75,
                33, 63, 216, 55, 128, 165, 118, 49, 219, 211, 0, 25, 223, 208, 52, 102, 180, 224,
                52, 16, 129, 57, 180, 65, 224, 139, 87, 200, 28, 60, 10, 189, 151, 184, 145, 33,
                251, 53, 115, 221, 215, 233, 124, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231,
                222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130,
                135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123,
                118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 14,
                71, 178, 46, 85, 6, 253, 128, 244, 7, 27, 0, 163, 191, 38, 231, 234, 153, 237, 65,
                211, 55, 86, 56, 248, 24, 164, 68, 46, 13, 79, 246, 42, 43, 89, 225, 144, 226, 50,
                242, 116, 115, 36, 199, 12, 59, 81, 80, 80, 124, 255, 97, 225, 137, 23, 126, 194,
                238, 250, 209, 38, 240, 16, 99, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231,
                222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130,
                135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123,
                118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 23,
                223, 249, 107, 203, 58, 85, 199, 106, 195, 136, 217, 101, 136, 19, 253, 62, 74, 78,
                84, 57, 59, 18, 39, 185, 45, 75, 129, 224, 182, 70, 183, 10, 160, 254, 246, 98, 24,
                17, 53, 33, 118, 146, 75, 184, 73, 125, 227, 98, 1, 143, 186, 15, 110, 199, 116,
                77, 35, 131, 8, 49, 254, 63, 129, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231,
                222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130,
                135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123,
                118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 11,
                16, 139, 51, 32, 128, 196, 65, 243, 141, 232, 218, 248, 86, 148, 11, 233, 149, 59,
                112, 247, 226, 5, 194, 150, 114, 9, 231, 201, 232, 195, 13, 40, 11, 158, 70, 28,
                244, 84, 213, 142, 142, 79, 111, 165, 92, 47, 115, 90, 40, 248, 3, 214, 106, 95, 7,
                151, 222, 143, 180, 132, 237, 79, 88, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65,
                231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13,
                130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39,
                123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31,
                25, 42, 87, 235, 123, 41, 48, 13, 151, 68, 19, 224, 85, 78, 105, 151, 144, 246, 54,
                78, 72, 194, 33, 42, 119, 253, 221, 0, 239, 39, 73, 154, 30, 109, 15, 159, 58, 138,
                237, 254, 19, 21, 213, 186, 35, 46, 22, 106, 43, 207, 219, 33, 167, 228, 115, 150,
                16, 73, 42, 246, 188, 45, 203, 232, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65,
                231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13,
                130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39,
                123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31,
                35, 76, 2, 225, 47, 114, 179, 201, 149, 224, 193, 81, 160, 65, 207, 91, 7, 157, 20,
                75, 90, 169, 42, 180, 250, 230, 47, 217, 143, 232, 141, 173, 4, 5, 36, 75, 18, 165,
                80, 48, 78, 190, 13, 178, 184, 7, 236, 10, 39, 160, 4, 240, 52, 168, 124, 171, 20,
                107, 54, 43, 33, 133, 91, 243, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231,
                222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130,
                135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123,
                118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 9,
                61, 133, 248, 245, 105, 8, 80, 198, 113, 38, 88, 34, 241, 182, 246, 248, 240, 63,
                132, 245, 220, 253, 231, 23, 13, 15, 5, 202, 112, 218, 30, 21, 237, 229, 98, 207,
                56, 124, 224, 148, 183, 194, 245, 240, 14, 79, 234, 63, 37, 108, 230, 164, 208, 15,
                142, 41, 253, 28, 251, 5, 45, 215, 112, 43, 140, 253, 145, 185, 5, 202, 227, 29,
                65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129,
                13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16,
                39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134,
                31, 35, 41, 140, 155, 211, 253, 93, 82, 106, 103, 151, 16, 24, 242, 219, 196, 226,
                5, 158, 106, 248, 185, 188, 228, 54, 225, 214, 32, 34, 53, 16, 220, 38, 23, 142,
                201, 8, 149, 94, 10, 233, 165, 96, 31, 243, 124, 233, 20, 27, 34, 134, 143, 18, 88,
                138, 175, 216, 31, 245, 53, 46, 52, 161, 79, 43, 140, 253, 145, 185, 5, 202, 227,
                29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210,
                129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31,
                16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26,
                134, 31, 10, 33, 23, 140, 7, 178, 116, 231, 50, 93, 12, 67, 109, 205, 112, 208, 43,
                248, 44, 150, 35, 143, 222, 154, 130, 152, 110, 231, 47, 185, 75, 77, 17, 235, 29,
                224, 254, 137, 93, 139, 107, 5, 38, 15, 114, 238, 49, 213, 248, 63, 62, 144, 174,
                234, 58, 31, 104, 29, 207, 112, 253, 52, 169, 89, 43, 140, 253, 145, 185, 5, 202,
                227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89,
                210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237,
                31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103,
                26, 134, 31, 19, 150, 2, 141, 210, 88, 235, 194, 230, 158, 84, 215, 179, 70, 113,
                131, 16, 169, 241, 105, 88, 199, 245, 231, 95, 154, 155, 161, 247, 70, 44, 132, 36,
                136, 255, 112, 120, 251, 86, 99, 240, 219, 65, 156, 33, 177, 24, 27, 162, 104, 78,
                82, 238, 12, 137, 202, 132, 178, 40, 163, 90, 66, 234, 67, 43, 140, 253, 145, 185,
                5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52,
                77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144,
                172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252,
                44, 103, 26, 134, 31, 44, 99, 58, 193, 69, 158, 214, 23, 237, 175, 112, 208, 48,
                215, 86, 212, 145, 223, 230, 250, 190, 21, 168, 186, 99, 17, 233, 166, 226, 245,
                76, 229, 44, 124, 150, 29, 75, 186, 240, 0, 163, 218, 222, 238, 183, 24, 248, 176,
                202, 155, 60, 106, 3, 12, 150, 181, 251, 164, 79, 22, 132, 116, 88, 244, 43, 140,
                253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154,
                173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88,
                32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106,
                194, 118, 252, 44, 103, 26, 134, 31, 47, 193, 116, 100, 36, 213, 251, 177, 120,
                140, 153, 106, 63, 106, 140, 239, 122, 36, 186, 44, 81, 219, 74, 34, 144, 143, 121,
                216, 250, 97, 121, 150, 31, 21, 10, 85, 233, 53, 118, 237, 122, 93, 19, 41, 21, 9,
                153, 100, 139, 3, 214, 171, 77, 36, 67, 56, 0, 146, 68, 240, 150, 93, 250, 125, 43,
                140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66,
                154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167,
                88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225,
                106, 194, 118, 252, 44, 103, 26, 134, 31, 31, 74, 5, 188, 182, 176, 142, 7, 118,
                156, 142, 10, 212, 12, 9, 159, 109, 203, 84, 186, 200, 165, 202, 174, 43, 255, 90,
                106, 189, 127, 223, 220, 15, 104, 14, 20, 216, 157, 215, 24, 138, 68, 94, 133, 125,
                184, 28, 163, 135, 239, 166, 116, 7, 163, 66, 103, 219, 90, 184, 38, 134, 60, 234,
                126, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 34, 166, 9, 177, 33, 44, 205,
                122, 20, 214, 44, 173, 211, 209, 231, 196, 133, 10, 182, 84, 133, 76, 20, 77, 60,
                77, 82, 41, 189, 81, 10, 173, 4, 0, 106, 79, 149, 29, 31, 92, 193, 115, 167, 23,
                28, 21, 3, 81, 249, 237, 174, 35, 65, 184, 92, 194, 3, 235, 34, 116, 43, 229, 184,
                169, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 4, 166, 226, 212, 171, 231,
                100, 122, 85, 106, 199, 140, 222, 226, 232, 38, 145, 212, 118, 233, 254, 156, 194,
                219, 110, 124, 158, 232, 26, 162, 245, 85, 42, 170, 129, 190, 97, 46, 102, 30, 104,
                234, 41, 47, 182, 174, 96, 211, 149, 231, 0, 10, 163, 109, 147, 63, 109, 43, 5, 32,
                8, 241, 185, 76, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74,
                146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50,
                42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124,
                17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 42, 143, 223, 34,
                161, 230, 163, 100, 121, 228, 236, 195, 174, 48, 25, 113, 139, 46, 142, 94, 134,
                122, 98, 53, 155, 216, 61, 48, 58, 33, 220, 94, 26, 80, 20, 94, 108, 187, 18, 10,
                172, 213, 21, 154, 7, 221, 120, 226, 231, 16, 75, 210, 186, 89, 122, 222, 88, 17,
                21, 109, 223, 239, 87, 122, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222,
                223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135,
                108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118,
                42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 33, 28,
                217, 158, 57, 255, 223, 219, 188, 211, 151, 136, 67, 84, 8, 253, 158, 36, 117, 120,
                104, 94, 195, 87, 5, 208, 236, 211, 148, 78, 134, 181, 28, 216, 59, 249, 222, 121,
                120, 116, 111, 153, 245, 137, 30, 236, 133, 132, 81, 157, 127, 121, 84, 137, 186,
                255, 111, 93, 45, 23, 84, 192, 208, 217, 43, 140, 253, 145, 185, 5, 202, 227, 29,
                65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129,
                13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16,
                39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134,
                31, 3, 11, 114, 251, 104, 47, 179, 183, 211, 84, 208, 240, 130, 169, 89, 185, 222,
                57, 188, 199, 254, 67, 61, 226, 0, 98, 68, 36, 223, 79, 175, 235, 11, 233, 131, 74,
                11, 99, 137, 39, 215, 165, 223, 32, 205, 223, 67, 248, 92, 157, 43, 94, 247, 93,
                104, 36, 48, 192, 140, 86, 95, 91, 211, 93, 43, 140, 253, 145, 185, 5, 202, 227,
                29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210,
                129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31,
                16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26,
                134, 31, 42, 170, 7, 50, 84, 173, 171, 58, 112, 194, 58, 3, 237, 24, 184, 128, 144,
                224, 3, 41, 162, 11, 246, 44, 108, 105, 86, 130, 205, 214, 233, 54, 41, 131, 126,
                7, 197, 250, 188, 151, 245, 192, 80, 88, 133, 0, 188, 10, 171, 230, 130, 88, 116,
                33, 181, 24, 245, 189, 141, 126, 62, 233, 120, 156, 43, 140, 253, 145, 185, 5, 202,
                227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89,
                210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237,
                31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103,
                26, 134, 31, 43, 159, 192, 9, 19, 196, 192, 143, 61, 31, 114, 96, 113, 160, 65,
                131, 79, 64, 58, 236, 131, 192, 1, 183, 197, 106, 254, 44, 6, 224, 198, 201, 26,
                149, 255, 78, 82, 144, 153, 143, 207, 86, 192, 76, 129, 153, 63, 15, 188, 57, 103,
                132, 198, 225, 67, 163, 16, 119, 161, 240, 238, 19, 90, 72, 43, 140, 253, 145, 185,
                5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52,
                77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144,
                172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252,
                44, 103, 26, 134, 31, 17, 59, 5, 77, 204, 157, 168, 62, 21, 141, 66, 185, 180, 36,
                10, 141, 179, 57, 174, 171, 249, 98, 67, 16, 209, 136, 67, 139, 19, 113, 47, 59,
                39, 87, 185, 52, 65, 149, 170, 253, 103, 73, 128, 46, 218, 240, 194, 217, 88, 168,
                51, 187, 134, 61, 155, 49, 186, 249, 130, 146, 14, 130, 43, 134, 43, 140, 253, 145,
                185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154, 173, 126,
                52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88, 32, 158,
                144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106, 194, 118,
                252, 44, 103, 26, 134, 31, 38, 79, 114, 29, 245, 244, 242, 254, 195, 36, 233, 197,
                149, 182, 132, 8, 223, 127, 42, 127, 33, 51, 18, 89, 23, 12, 130, 198, 43, 24, 105,
                221, 44, 37, 194, 248, 92, 118, 67, 196, 135, 211, 194, 200, 232, 129, 187, 115,
                27, 143, 145, 66, 95, 139, 85, 71, 227, 123, 49, 188, 49, 225, 34, 136, 43, 140,
                253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227, 188, 66, 154,
                173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108, 36, 167, 88,
                32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219, 192, 225, 106,
                194, 118, 252, 44, 103, 26, 134, 31, 20, 74, 41, 231, 2, 129, 158, 80, 205, 146,
                148, 200, 195, 224, 31, 223, 155, 100, 5, 86, 218, 162, 74, 233, 106, 237, 141,
                213, 122, 93, 176, 163, 23, 93, 233, 73, 203, 23, 229, 19, 93, 178, 114, 224, 221,
                167, 13, 12, 4, 181, 185, 247, 180, 176, 11, 200, 58, 27, 206, 139, 229, 102, 54,
                135, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223, 74, 146, 126, 227,
                188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108, 50, 42, 170, 108,
                36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42, 124, 17, 21, 219,
                192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 47, 230, 189, 120, 18, 107, 19,
                151, 151, 190, 79, 165, 158, 30, 156, 242, 234, 11, 215, 200, 199, 150, 221, 94,
                69, 146, 160, 91, 155, 133, 198, 193, 24, 240, 173, 17, 154, 213, 239, 141, 241,
                25, 109, 42, 241, 206, 125, 130, 158, 232, 150, 20, 26, 5, 200, 10, 228, 237, 123,
                208, 141, 217, 227, 57, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222, 223,
                74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135, 108,
                50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118, 42,
                124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31, 11, 119, 214,
                57, 101, 128, 237, 69, 143, 112, 70, 250, 81, 175, 82, 19, 103, 112, 75, 96, 118,
                220, 205, 58, 161, 41, 15, 32, 32, 6, 18, 66, 11, 5, 61, 167, 166, 219, 176, 36,
                60, 38, 211, 43, 74, 237, 153, 36, 130, 192, 138, 172, 108, 38, 248, 199, 208, 215,
                35, 120, 217, 90, 246, 134, 43, 140, 253, 145, 185, 5, 202, 227, 29, 65, 231, 222,
                223, 74, 146, 126, 227, 188, 66, 154, 173, 126, 52, 77, 89, 210, 129, 13, 130, 135,
                108, 50, 42, 170, 108, 36, 167, 88, 32, 158, 144, 172, 237, 31, 16, 39, 123, 118,
                42, 124, 17, 21, 219, 192, 225, 106, 194, 118, 252, 44, 103, 26, 134, 31,
            ];
            let miner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";
            let miner_address = Address::from_str(miner).unwrap();

            task_service.run();

            println!("11");

            task_sender
                .send(TaskChanData {
                    ty: TaskType::RunTask,
                    data,
                    prover: Address::from_str("0x48a7fb14fd5711cf057bc7392973680231e8aebb")
                        .unwrap(),
                    tag: "v1".to_string(),
                    tid: Uint::from(0),
                    miner: ControllerKey(miner_address),
                    controller: ControllerKey(miner_address),
                })
                .unwrap();

            while let Some(tx_data) = tx_receiver.recv().await {
                println!("tx_data: {tx_data:?}");
            }
        });
    }
}
